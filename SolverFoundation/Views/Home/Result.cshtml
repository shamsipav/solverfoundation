@model SolverFoundation.Models.InputDataModel
@{
    ViewBag.Title = "Результаты";
}
<div class="result">
    <h1 class="heading">Результат проверки математической модели оптимизации</h1>
    <table class="table">
        <thead>
            <tr>
                <th scope="col">Технологический параметр, ед. изм</th>
                <th class="text-center" scope="col">ДП 1</th>
                <th class="text-center" scope="col">ДП 2</th>
                <th class="text-center" scope="col">ДП 3</th>
                <th class="text-center" scope="col">ДП 4</th>
                <th class="text-center" scope="col">ДП 5</th>
                <th class="text-center" scope="col">ДП 6</th>
                <th class="text-center" scope="col">ДП 7</th>
                <th class="text-center" scope="col">ДП 8</th>
                <th class="text-center" scope="col">Сумма</th>
                <th class="text-center" scope="col">Ограничение</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <th scope="row">
                    Расход природного газа в базовом периоде, м3/ч
                </th>
                @{
                    for (int i = 0; i < Model.solverRows.Length; i++)
                    {
                        <td>@Model.solverRows[i].NaturalGasConsumptionBasePeriod</td>
                    }
                }
                <td></td>
                <td></td>
            </tr>
            <tr class="project">
                <th scope="row">
                    Расход природного газа в расчетном периоде, м3/ч
                </th>
                @{
                    double NaturalGasSumm = 0;
                    for (int i = 0; i < Model.solverRows.Length; i++)
                    {
                        NaturalGasSumm += Model.solverRows[i].NaturalGasConsumptionBillingPeriod;
                        <td>@Math.Round(Model.solverRows[i].NaturalGasConsumptionBillingPeriod, 3)</td>
                    }
                    <td>@Math.Round(NaturalGasSumm, 3)</td>
                    <td><=@Model.ReserveNaturalGasConsumptions</td>
                }
            </tr>
            <tr>
                <th scope="row">
                    Минимально допустимый расход природного газа, м3/ч
                </th>
                @{
                    for (int i = 0; i < Model.solverRows.Length; i++)
                    {
                        <td>@Model.solverRows[i].MinimumAllowableConsumptionOfNaturalGas</td>
                    }
                }
                <td></td>
                <td></td>
            </tr>
            <tr>
                <th scope="row">
                    Максимально допустимый расход природного газа, м3/ч
                </th>
                @{
                    for (int i = 0; i < Model.solverRows.Length; i++)
                    {
                        <td>@Model.solverRows[i].MaximumAllowableConsumptionOfNaturalGas</td>
                    }
                }
                <td></td>
                <td></td>
            </tr>
            <tr>
                <th scope="row">
                    Расход кокса в базовом периоде, т/час
                </th>
                @{
                    for (int i = 0; i < Model.solverRows.Length; i++)
                    {
                        <td>@Model.solverRows[i].CokeConsumptionBasePeriod</td>
                    }
                }
                <td></td>
                <td></td>
            </tr>
            <tr class="project">
                <th scope="row">
                    Расход кокса в проектном периоде, т/час
                </th>
                @{
                    double CokeConsumptionSumm = 0;
                    for (int i = 0; i < Model.solverRows.Length; i++)
                    {
                        CokeConsumptionSumm += Model.solverRows[i].CokeConsumptiontProjectPeriod;
                        <td>@Math.Round(Model.solverRows[i].CokeConsumptiontProjectPeriod, 3)</td>
                    }
                    <td>@Math.Round(CokeConsumptionSumm, 3)</td>
                    <td><=@Model.CokeReserves</td>
                }
            </tr>
            <tr>
                <th scope="row">
                    Эквивалент замены кокса в базовом периоде, кг кокса /(м3 ПГ)
                </th>
                @{
                    for (int i = 0; i < Model.solverRows.Length; i++)
                    {
                        <td>@Model.solverRows[i].EquivalentCokeReplacementBasePeriod</td>
                    }
                }
                <td></td>
                <td></td>
            </tr>
            <tr>
                <th scope="row">
                    Производительность по чугуну в базовом периоде, т /ч
                </th>
                @{
                    for (int i = 0; i < Model.solverRows.Length; i++)
                    {
                        <td>@Model.solverRows[i].ChugunProductivityBasePeriod</td>
                    }
                }
                <td></td>
                <td></td>
            </tr>
            <tr class="project">
                <th scope="row">
                    Производительность по чугуну в проектном периоде, т /ч
                </th>
                @{
                    double ChugunProductivitySumm = 0;
                    for (int i = 0; i < Model.solverRows.Length; i++)
                    {
                        ChugunProductivitySumm += Model.solverRows[i].ChugunProductivityProjectPeriod;
                        <td>@Math.Round(Model.solverRows[i].ChugunProductivityProjectPeriod, 3)</td>
                    }
                    <td>@Math.Round(ChugunProductivitySumm, 3)</td>
                    <td>>=@Model.RequiredChugunProduction</td>
                }
            </tr>
            <tr>
                <th scope="row">
                    Содержание S в чугуне в базовом периоде, %
                </th>
                @{
                    for (int i = 0; i < Model.solverRows.Length; i++)
                    {
                        <td>@Model.solverRows[i].SeraContentInChugunBasePeriod</td>
                    }
                }
                <td></td>
                <td></td>
            </tr>
            <tr class="project">
                <th scope="row">
                    Содержание S в чугуне в проектном периоде, %
                </th>
                @{
                    for (int i = 0; i < Model.solverRows.Length; i++)
                    {
                        <td>@Math.Round(Model.solverRows[i].SeraContentInChugunProjectPeriod, 3)</td>
                    }
                }
                <td></td>
                <td></td>
            </tr>
            <tr>
                <th scope="row">
                    Минимально допустимое [S], %
                </th>
                @{
                    for (int i = 0; i < Model.solverRows.Length; i++)
                    {
                        <td>@Model.solverRows[i].MinimumAllowedSeraContent</td>
                    }
                }
                <td></td>
                <td></td>
            </tr>
            <tr>
                <th scope="row">
                    Максимально допустимое [S], %
                </th>
                @{
                    for (int i = 0; i < Model.solverRows.Length; i++)
                    {
                        <td>@Model.solverRows[i].MaximumAllowedSeraContent</td>
                    }
                }
                <td></td>
                <td></td>
            </tr>
            <tr>
                <th scope="row">
                    Изменение производства чугуна при изменении ПГ, т чуг/(м3 ПГ)
                </th>
                @{
                    for (int i = 0; i < Model.solverRows.Length; i++)
                    {
                        <td>@Model.solverRows[i].KoefChangeChugunProductionChangeNaturalGas</td>
                    }
                }
                <td></td>
                <td></td>
            </tr>
            <tr>
                <th scope="row">
                    Изменение производства чугуна при увеличении расхода кокса, т чуг/(кг кокса)
                </th>
                @{
                    for (int i = 0; i < Model.solverRows.Length; i++)
                    {
                        <td>@Model.solverRows[i].KoefChangeChugunProductionIncreaseCokeConsumption</td>
                    }
                }
                <td></td>
                <td></td>
            </tr>
            <tr>
                <th scope="row">
                    Изменение [S] при увеличении расхода ПГ на 1 м3/ч
                </th>
                @{
                    for (int i = 0; i < Model.solverRows.Length; i++)
                    {
                        <td>@Model.solverRows[i].KoefChangeSeraIncreaseNaturalGas</td>
                    }
                }
                <td></td>
                <td></td>
            </tr>
            <tr>
                <th scope="row">
                    Изменение [S] при увеличении расхода кокса на 1 кг/ч
                </th>
                @{
                    for (int i = 0; i < Model.solverRows.Length; i++)
                    {
                        <td>@Model.solverRows[i].KoefChangeSeraIncreaceCokeConsumption</td>
                    }
                }
                <td></td>
                <td></td>
            </tr>
            <tr>
                <th scope="row">
                    Изменение [S] при увеличении производительности печи на 1 т чуг/ч
                </th>
                @{
                    for (int i = 0; i < Model.solverRows.Length; i++)
                    {
                        <td>@Model.solverRows[i].KoefChangeSeraIncreaceFurnanceCapacity</td>
                    }
                }
                <td></td>
                <td></td>
            </tr>
        </tbody>
    </table>
</div>